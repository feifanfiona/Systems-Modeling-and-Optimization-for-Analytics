#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Dec  5 05:07:07 2020

@author: fionafei
"""


import cvxpy as cp

x = cp.Variable(2, nonneg = True) # vector variable



obj_func=3*x[0]+2*x[1]
#obj_func_neg=3*x[0]+2*x[1]

constraints = []
constraints.append(x[0]+2*x[1]<=11)
constraints.append(x[0]-3*x[1]<=1)
constraints.append(x[0]>=0)
constraints.append(x[1]>=0)



problem = cp.Problem(cp.Maximize(obj_func), constraints)
#problem = cp.Problem(cp.Minimize(obj_func_neg), constraints)

#problem.solve(solver=cp.CVXOPT,verbose = True)
#problem.solve(verbose = True)
problem.solve(solver=cp.GUROBI,verbose = True)

print("obj_func =")
print(obj_func.value)
#print(obj_func_neg.value)
print("x =")
print(x.value)

# Shadow prices or dual prices
print("optimal (x[0]+2*2<=11) dual variable", constraints[0].dual_value)
print("optimal (x[0]-3*2<=1) dual variable", constraints[1].dual_value)

# Reduced costs
print("reduced cost of the 1st primal variable x[0]", (-1)*constraints[2].dual_value)
print("reduced cost of the 2nd primal variable x[1]", (-1)*constraints[3].dual_value)